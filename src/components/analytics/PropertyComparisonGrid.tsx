import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { PropertyMetricsComparison } from "./PropertyMetricsComparison";
import { EmailShareDialog } from "@/components/EmailShareDialog";
import { exportPropertyComparison } from "@/utils/pdfExport";
import { PropertyComparisonHeader } from "./comparison/PropertyComparisonHeader";
import { PropertyComparisonCards } from "./comparison/PropertyComparisonCards";
import type { PropertyFilters as Filters } from "./PropertyFilters";
import type { SortOption } from "./PropertySorting";

interface PropertyComparisonGridProps {
  propertyIds: string[];
}

export function PropertyComparisonGrid({ propertyIds }: PropertyComparisonGridProps) {
  const [filters, setFilters] = useState<Filters>({
    priceRange: '',
    propertyType: '',
    location: '',
  });

  const [sort, setSort] = useState<SortOption>({
    field: 'created_at',
    direction: 'desc',
  });

  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);

  const { data: properties, isLoading } = useQuery({
    queryKey: ['propertyComparison', propertyIds, filters, sort],
    queryFn: async () => {
      if (!propertyIds.length) return [];
      
      let query = supabase
        .from('properties')
        .select(`
          *,
          property_analytics (
            id,
            property_id,
            ai_confidence_score,
            risk_score,
            predicted_growth,
            market_trend,
            cap_rate,
            roi,
            occupancy_rate,
            created_at,
            updated_at
          ),
          property_market_data (
            id,
            property_id,
            market_value,
            price_per_sqft,
            market_demand_score,
            local_market_trend,
            comparable_sales,
            last_updated,
            created_at,
            updated_at
          )
        `)
        .in('id', propertyIds);

      // Apply filters
      if (filters.priceRange) {
        const [min, max] = filters.priceRange.split('-');
        if (max === 'plus') {
          query = query.gte('price', parseInt(min));
        } else {
          query = query.gte('price', parseInt(min)).lte('price', parseInt(max));
        }
      }

      if (filters.propertyType) {
        query = query.eq('property_type', filters.propertyType);
      }

      if (filters.location) {
        query = query.ilike('location', `%${filters.location}%`);
      }

      // Apply sorting
      if (sort.field.includes('_score') || sort.field === 'roi') {
        query = query.order(`property_analytics.${sort.field}`, { ascending: sort.direction === 'asc' });
      } else {
        query = query.order(sort.field, { ascending: sort.direction === 'asc' });
      }

      const { data, error } = await query;
      if (error) throw error;
      return data || [];
    },
  });

  if (isLoading) {
    return <div>Loading comparison data...</div>;
  }

  if (!properties?.length) {
    return <div>Select properties to compare</div>;
  }

  const handleExport = () => {
    exportPropertyComparison(properties);
  };

  const generateEmailContent = () => {
    const propertyList = properties.map(property => `
      <div style="margin-bottom: 20px;">
        <h2 style="color: #333;">${property.title}</h2>
        <p><strong>Price:</strong> $${property.price.toLocaleString()}</p>
        <p><strong>Location:</strong> ${property.location}</p>
        <p><strong>Type:</strong> ${property.property_type}</p>
        ${property.property_analytics?.[0] ? `
          <p><strong>ROI:</strong> ${property.property_analytics[0].roi}%</p>
          <p><strong>Risk Score:</strong> ${property.property_analytics[0].risk_score}</p>
        ` : ''}
      </div>
    `).join('');

    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h1 style="color: #2563eb;">Property Comparison Report</h1>
        ${propertyList}
        <p style="margin-top: 20px; color: #666;">
          This comparison was generated by AcqProp. Visit our platform for more detailed analytics and insights.
        </p>
      </div>
    `;
  };

  return (
    <div className="space-y-6">
      <PropertyComparisonHeader
        onFilterChange={setFilters}
        onSortChange={setSort}
        onEmailShare={() => setIsEmailDialogOpen(true)}
        onExport={handleExport}
      />
      
      <PropertyComparisonCards properties={properties} />

      <PropertyMetricsComparison properties={properties} />

      <EmailShareDialog
        open={isEmailDialogOpen}
        onOpenChange={setIsEmailDialogOpen}
        properties={properties}
        htmlContent={generateEmailContent()}
      />
    </div>
  );
}